<project name="NWN Tools Development" default="build" basedir=".">

    <!-- See "build.properties.sample" in the top level directory for all     -->
    <!-- property values you must customize for successful building!!!        -->
    <property file="build.properties"/>
    <property file="${user.home}/build.properties"/>

    <!-- set global properties for this build -->
    <property name="src"           value="src"/>
    <property name="src.java"      value="${src}/java" />
    <property name="src.cmd"      value="${src}/cmd" />
    <property name="build"         value="build"/>
    <property name="build.classes" value="${build}/classes" />
    <property name="dist"          value="dist"/>
    <property name="doc"           value="${basedir}/doc" />
    <property name="doc.javadoc"   value="${doc}/javadoc" />

    <!-- Construct a build classpath pointing to related libs
         and directories other than build/classes. -->
    <path id="build.classpath">
        <!-- example reference:
            <pathelement location="${log4j.jar}"/>
            -->
        <pathelement location="build/classes"/>
        <fileset dir="lib">
            <include name="**/*.jar" />
        </fileset>
    </path>
    <property name="build.classpath" refid="build.classpath" />

    <!-- Targets for creating some convenience scripts for setting up
        an environment. -->
    <target name="setclasspath.cmd" >
        <echo message="Creating setclasspath.cmd to set the CLASSPATH environment variable." />
        <copy file="template/setclasspath.cmd.template" tofile="setclasspath.cmd" overwrite="yes" />
        <replace file="setclasspath.cmd" token="@build.classpath@" value="${build.classpath}" />
    </target>
    <target name="setclasspath.cmd.relative" >
        <echo message="Creating setclasspath.cmd to set the CLASSPATH environment variable." />
        <copy file="template/setclasspath.cmd.template" tofile="setclasspath.cmd" overwrite="yes" />

        <!--<echo message="lib path: ${lib.path}" /> -->

        <pathconvert targetos="windows" property="relative.classpath" refid="build.classpath">
            <map from="${basedir}" to="." />
        </pathconvert>

        <replace file="setclasspath.cmd" token="@build.classpath@" value="${relative.classpath}" />
    </target>
    <target name="setclasspath.sh" >
        <echo message="Creating setclasspath.sh to set the CLASSPATH environment variable." />
        <copy file="template/setclasspath.sh.template" tofile="setclasspath.sh" overwrite="yes" />
        <replace file="setclasspath.sh" token="@build.classpath@" value="${build.classpath}" />
    </target>
    <target name="setclasspath.csh" >
        <echo message="Creating setclasspath.csh to set the CLASSPATH environment variable." />
        <copy file="template/setclasspath.csh.template" tofile="setclasspath.csh" overwrite="yes" />
        <replace file="setclasspath.csh" token="@build.classpath@" value="${build.classpath}" />
    </target>


    <target name="init">
        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build.classes}"/>
    </target>

    <target name="compile" depends="init">
        <!-- Compile the java code from ${src} into ${build} -->
        <javac srcdir="${src}/java" destdir="${build.classes}" deprecation="${javac.deprecation}"
                                    debug="${javac.debug}" optimize="${javac.optimize}"
                                    excludes="${javac.excludes}" classpathref="build.classpath" />
    </target>

    <target name="rmic" depends="init">
        <!-- Generate the RMI stubs and skeletons. -->
        <rmic base="${build.classes}" includes="**/Remote*Impl.class" classpathref="build.classpath" />
    </target>

    <target name="compile.deprecation" depends="init">
        <!-- Compile the java code from ${src} into ${build} -->
        <javac srcdir="${src}/java" destdir="${build.classes}" deprecation="on" debug="on"/>
    </target>

    <!-- Create the Javadocs. -->
    <target name="javadoc">
        <!-- clean the old version out and recreate.  Javadoc
            will be happier this way. -->
        <delete dir="${doc.javadoc}"/>
        <mkdir dir="${doc.javadoc}"/>

        <javadoc packagenames="org.progeeks.*"
                sourcepath="${src.java}"
                destdir="${doc.javadoc}"
                author="true"
                version="true"
                windowtitle="Progeeks.org Project Documentation"
                doctitle="Progeeks-Dev"
                bottom="Copyright &#169; 2002 Paul Speed.  All Rights Reserved."
                />
    </target>

    <target name="java.resources" depends="init">
        <copy todir="${build.classes}">
            <fileset dir="${src}/java">
                <include name="**/LICENSE" />
                <include name="**/*.properties" />
                <include name="**/*.gif" />
                <include name="**/*.jpg" />
                <include name="**/*.png" />
                <include name="**/*.wav" />
                <include name="**/*.txt" />
                <include name="**/*.p" />
                <include name="**/*.html" />
            </fileset>
        </copy>
        <copy todir="${build.classes}">
            <fileset dir="${src}">
                <include name="**/LICENSE" />
            </fileset>
        </copy>
    </target>

    <target name="build" depends="compile,rmic,java.resources">
    </target>

    <target name="dist" depends="build">
        <!-- Create the distribution directory -->
        <mkdir dir="${dist}/lib"/>

        <copy file="lib/meta-jb-xml.jar" toDir="${dist}/lib" />
        <copy file="lib/meta-jb-util.jar" toDir="${dist}/lib" />
        <copy file="lib/log4j.jar" toDir="${dist}/lib" />
        <copy file="lib/log4j.properties" toDir="${dist}/lib" />
    </target>

    <target name="nwn-tools.jar" description="Create NWN Tools distribution" depends="dist" >

        <!-- make the jar file. -->
        <jar jarFile="${dist}/nwn-tools.jar" basedir="${build.classes}" >
            <include name="org/progeeks/**" />
            <include name="LICENSE" />
            <exclude name="org/progeeks/util/thread/**" />
            <exclude name="org/progeeks/nwn/io/bif/**" />
            <exclude name="org/progeeks/nwn/io/image/**" />
            <exclude name="org/progeeks/nwn/io/key/**" />
            <exclude name="org/progeeks/nwn/io/nss/**" />
            <exclude name="org/progeeks/nwn/io/set/**" />
            <exclude name="org/progeeks/nwn/model/**" />
            <exclude name="org/progeeks/nwn/ui/**" />
            <manifest>
                <attribute name="Class-Path" value="lib/meta-jb-xml.jar lib/meta-jb-util.jar lib/log4j.jar" />
            </manifest>
        </jar>

        <!-- make sure it has a log4j.properties file. -->
        <jar jarFile="${dist}/nwn-tools.jar" basedir="lib" update="true" >
            <include name="log4j.properties" />
        </jar>
    </target>

    <target name="nwn-io.jar" description="Create NWN Resource IO distribution" depends="dist" >

        <!-- make the jar file. -->
        <jar jarFile="${dist}/nwn-io.jar" basedir="${build.classes}" >
            <include name="LICENSE" />
            <include name="org/progeeks/nwn/io/bif/**" />
            <include name="org/progeeks/nwn/io/image/**" />
            <include name="org/progeeks/nwn/io/key/**" />
            <include name="org/progeeks/nwn/io/nss/**" />
            <include name="org/progeeks/nwn/io/set/**" />
            <manifest>
                <attribute name="Class-Path" value="lib/meta-jb-util.jar lib/log4j.jar" />
            </manifest>
        </jar>

        <!-- make sure it has a log4j.properties file. -->
        <jar jarFile="${dist}/nwn-io.jar" basedir="lib" update="true" >
            <include name="log4j.properties" />
        </jar>
    </target>

    <target name="modpacker.zip" description="Create the ModPacker zip download" depends="nwn-tools.jar" >

        <!-- Create the modpacker directory -->
        <mkdir dir="${dist}/modpacker"/>
        <mkdir dir="${dist}/modpacker/lib"/>

        <copy file="../web-site/modpacker.html" toFile="${dist}/modpacker/readme.html" />
        <copy file="${dist}/nwn-tools.jar" toDir="${dist}/modpacker" />
        <copy file="${dist}/lib/meta-jb-xml.jar" toDir="${dist}/modpacker/lib" />
        <copy file="${dist}/lib/meta-jb-util.jar" toDir="${dist}/modpacker/lib" />
        <copy file="${dist}/lib/log4j.jar" toDir="${dist}/modpacker/lib" />
        <copy file="${dist}/lib/log4j.properties" toDir="${dist}/modpacker/lib" />
        <copy file="${src.cmd}/modpacker-setup.cmd" toFile="${dist}/modpacker/setup.cmd" />

        <zip destfile="${dist}/modpacker.zip"
            basedir="${dist}/modpacker" >
        </zip>
    </target>

    <target name="minimap-export.zip" description="Create the MiniMapExport zip download"
                                      depends="nwn-tools.jar,nwn-io.jar" >

        <!-- Create the modpacker directory -->
        <mkdir dir="${dist}/minimap-export"/>
        <mkdir dir="${dist}/minimap-export/lib"/>

        <!--<copy file="../web-site/minimap-export.html" toFile="${dist}/minimap-export/readme.html" /> -->
        <copy file="${dist}/nwn-tools.jar" toDir="${dist}/minimap-export" />
        <copy file="${dist}/nwn-io.jar" toDir="${dist}/minimap-export" />
        <copy file="${dist}/lib/meta-jb-util.jar" toDir="${dist}/minimap-export/lib" />
        <copy file="${dist}/lib/log4j.jar" toDir="${dist}/minimap-export/lib" />
        <copy file="${dist}/lib/log4j.properties" toDir="${dist}/minimap-export/lib" />
        <copy file="${src.cmd}/minimap-export-setup.cmd" toFile="${dist}/minimap-export/setup.cmd" />

        <zip destfile="${dist}/minimap-export.zip"
            basedir="${dist}/minimap-export" >
        </zip>
    </target>

    <target name="nwntools-src.zip" description="Project source distribution." >
        <mkdir dir="${dist}" />

        <zip destfile="${dist}/nwntools-src.zip" >
            <fileset dir="${basedir}" >
                <include name="build.xml" />
                <include name="build.properties.sample" />
                <include name="src/**" />
                <exclude name="**/CVS" />
                <exclude name="**/backups/**" />
            </fileset>
        </zip>

    </target>

    <target name="clean">
        <!-- Delete the ${build} and ${dist} directory trees -->
        <delete dir="${build.classes}"/>
        <delete dir="${dist}"/>
    </target>

</project>
